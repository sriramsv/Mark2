import speech_recognition as sr
import subprocess,os
import multiprocessing
import os,sys,signal,time
import threading
import gobject
from utils.tts import speak
from config import GOOGLE_API_KEY,FAIL_FILE,voice_queue,results_queue,ny,keywords,LANG_FILE,DIC_FILE
from listener import Recognizer
gobject.threads_init()


class OnlineRecognizer(multiprocessing.Process):

    def __init__(self):
        super(OnlineRecognizer, self).__init__()
        self.off= Recognizer(LANG_FILE,DIC_FILE)
        self.off.connect('finished',self.is_keyword)
        self.stop=threading.Event()
        self.r = sr.Recognizer()
        self.r.energy_threshold = 3000
        self.r.pause_threshold = 0.5
        # subprocess.call("pulseaudio --kill>/dev/null",shell=True)
        # subprocess.call("jack_control start>/dev/null",shell=True)
        self.daemon = True
        self.counter=0
        self.code=False

    def run(self):
        r=self.r
        print "Voice Process:", self.pid
         self.off.listen()
#        self.code==True
#        self.online_rec()
    def pause(self):
        os.kill(self.pid,signal.SIGSTOP)
    def resume(self):
        os.kill(self.pid, signal.SIGCONT)
    def end(self):
        print "ending recognition server"
        self.stop.set()
        print 'stopping recognition'
        # speak("I have stopped recognition")

    def is_keyword(self,off,text):
        print text.lower()
        if text.lower() in keywords:
            self.code=True
            self.online_rec()
        return self.code


    def online_rec(self):
        r=self.r
        try:
            while not self.stop.isSet():
                    if self.code:
                        print "Entered online"
#                        self.off.pause()
                        with sr.Microphone() as source:
                            audi1 = r.adjust_for_ambient_noise(source)
                            print '-----Listening---------\n'
                            if not self.stop.isSet():
                                audi1 = r.listen(source)
                                print "-----Recorded------\n"
                            print '-----Recognizing-------\n'
                            if not self.stop.isSet():
                                try:
                                    speak("I am listening")
                                    data=r.recognize_google(audi1,key=GOOGLE_API_KEY,language="en-US",show_all=False)
                                    # ny.show('I am listening')
                                    voice_queue.put(data.lower())
                                    self.code=False
                                    self.off.listen()
                                except IndexError:
                                    # the API key didn't work
                                    speak("I am sorry sir, could not connect to the internet")
                                    print("No internet connection")
                                except KeyError:
                                               # the API key didn't work
                                    speak("I am afraid,your API key is invalid")
                                    print("Invalid API key or quota maxed out")
                                except LookupError:
                                    print("Could not understand audio")
                                except sr.UnknownValueError:
                                    pass

                    else:
                        break
        except KeyboardInterrupt:
            sys.exit()
